from __future__ import print_function, division, absolute_import

from sabaody.utils import expect

from collections import OrderedDict
from numpy import array

d = {
  # initial conditions
  #'cdhap_init': 0.167,
  #'ce4p_init': 0.098,
  #'cf6p_init': 0.6,
  #'cfdp_init': 0.272,
  #'cg1p_init': 0.653,
  #'cg6p_init': 3.48,
  #'cgap_init': 0.218,
  #'cpep_init': 2.67,
  #'cpg_init': 0.808,
  #'cpg2_init': 0.399,
  #'cpg3_init': 2.13,
  #'cpgp_init': 0.008,
  #'cpyr_init': 2.67,
  #'crib5p_init': 0.398,
  #'cribu5p_init': 0.111,
  #'csed7p_init': 0.276,
  #'cxyl5p_init': 0.138,
  #'cglcex_init': 2.,

  # not mass-action constants
  # appear to be equilibrium binding constants
  'kALDOdhap': 0.088,
  'kALDOeq': 0.144,
  'kALDOfdp': 1.75,
  'kALDOgap': 0.088,
  'kALDOgapinh': 0.6,

  # Michaelis constants
  'KDAHPSe4p': 0.035,
  'KDAHPSpep': 0.0053,
  'KENOeq': 6.73,
  'KENOpep': 0.135,
  'KENOpg2': 0.1,
  'KG1PATatp': 4.42,
  'KG1PATfdp': 0.119,
  'KG1PATg1p': 3.2,
  'KG3PDHdhap': 1.,
  'KG6PDHg6p': 14.4,
  'KG6PDHnadp': 0.0246,
  'KG6PDHnadphg6pinh': 6.43,
  'KG6PDHnadphnadpinh': 0.01,
  'KGAPDHeq': 0.63,
  'KGAPDHgap': 0.683,
  'KGAPDHnad': 0.252,
  'KGAPDHnadh': 1.09,
  'KGAPDHpgp': 1.04e-05,
  'KPDHpyr': 1159.,
  'KpepCxylasefdp': 0.7,
  'KpepCxylasepep': 4.07,
  'KPFKadpa': 128.,
  'KPFKadpb': 3.89,
  'KPFKadpc': 4.14,
  'KPFKampa': 19.1,
  'KPFKampb': 3.2,
  'KPFKatps': 0.123,
  'KPFKf6ps': 0.325,
  'KPFKpep': 3.26,
  'KPGDHatpinh': 208.,
  'KPGDHnadp': 0.0506,
  'KPGDHnadphinh': 0.0138,
  'KPGDHpg': 37.5,
  'KPGIeq': 0.1725,
  'KPGIf6p': 0.266,
  'KPGIf6ppginh': 0.2,
  'KPGIg6p': 2.9,
  'KPGIg6ppginh': 0.2,
  'KPGKadp': 0.185,
  'KPGKatp': 0.653,
  'KPGKeq': 1934.4,
  'KPGKpg3': 0.473,
  'KPGKpgp': 0.0468,
  'KPGluMueq': 0.188,
  'KPGluMupg2': 0.369,
  'KPGluMupg3': 0.2,
  'KPGMeq': 0.196,
  'KPGMg1p': 0.0136,
  'KPGMg6p': 1.038,
  'KPKadp': 0.26,
  'KPKamp': 0.2,
  'KPKatp': 22.5,
  'KPKfdp': 0.19,
  'KPKpep': 0.31,
  'KPTSa1': 3082.3,
  'KPTSa2': 0.01,
  'KPTSa3': 245.3,
  'KPTSg6p': 2.15,
  'KR5PIeq': 4.,
  'KRPPKrib5p': 0.1,
  'KRu5Peq': 1.4,
  'KSerSynthpg3': 1.,
  'KSynth1pep': 1.,
  'KSynth2pyr': 1.,
  'KTAeq': 1.05,
  'kTISdhap': 2.8,
  'kTISeq': 1.39,
  'kTISgap': 0.3,
  'KTKaeq': 1.2,
  'KTKbeq': 10.,
  'LPFK': 5629067.,
  'LPK': 1000.,

  # Hill params
  'nDAHPSe4p': 2.6,
  'nDAHPSpep': 2.2,
  'nG1PATfdp': 1.2,
  'nPDH': 3.68,
  'npepCxylasefdp': 4.21,
  'nPFK': 11.1,
  'nPK': 4.,
  'nPTSg6p': 3.66,

  # Vmax's
  'rmaxALDO': 17.41464425,
  'rmaxDAHPS': 0.1079531227,
  'rmaxENO': 330.4476151,
  'rmaxG1PAT': 0.007525458026,
  'rmaxG3PDH': 0.01162042696,
  'rmaxG6PDH': 1.380196955,
  'rmaxGAPDH': 921.5942861,
  'rmaxMetSynth': 0.0022627,
  'rmaxMurSynth': 0.00043711,
  'rmaxPDH': 6.059531017,
  'rmaxpepCxylase': 0.1070205858,
  'rmaxPFK': 1840.584747,
  'rmaxPGDH': 16.23235977,
  'rmaxPGI': 650.9878687,
  'rmaxPGK': 3021.773771,
  'rmaxPGluMu': 89.04965407,
  'rmaxPGM': 0.8398242773,
  'rmaxPK': 0.06113150238,
  'rmaxPTS': 7829.78,
  'rmaxR5PI': 4.83841193,
  'rmaxRPPK': 0.01290045226,
  'rmaxRu5P': 6.739029475,
  'rmaxSerSynth': 0.025712107,
  'rmaxSynth1': 0.01953897003,
  'rmaxSynth2': 0.07361855055,
  'rmaxTA': 10.87164108,
  'rmaxTIS': 68.67474392,
  'rmaxTKa': 9.473384783,
  'rmaxTKb': 86.55855855,
  'rmaxTrpSynth': 0.001037,

  'VALDOblf': 2., # aldolase parameter, needs more investigation

  #'cfeed': 110.96, # carbon influx, don't fit
  #'Dil': 2.78e-05, # dilution, don't fit
  #'mu': 2.78e-05, # not a parameter, possibly volume factor
}

# sort by name and make ordered dict
params = OrderedDict(sorted(d.items(), key=lambda t: t[0]))
from math import log
param_array = array(list(log(float(v), 10.) for v in params.values()))

param_list = list(params.keys())

def applyParamVec(r, p):
    # type: (RoadRunner, array) -> None
    '''
    Applies a parameter vector p to a RoadRunner instance r.
    '''
    expect(len(p) != len(param_list), 'Parameter vector size mismatch')
    from math import exp
    for k,v in enumerate(p):
        r[param_list[k]] = exp(v)


def getDefaultParamValues():
    # type: () -> array
    return param_array

def getUpperBound():
    '''
    10x original value.
    '''
    return getDefaultParamValues()+1

def getLowerBound():
    '''
    1/10 original value.
    '''
    return getDefaultParamValues()-1

# def getBestKnownValues():
#     '''
#     Return the values from the best known solution.
#     '''
#     from math import log
#     # 030a95e1-ec24-4daf-b82d-2fd8b08d81f4, 19 hours, 2000 rounds, 0.16290388241021264 score
#     return array([ -0.87427506, -1.42586653,  1.16247845, -0.29501387, -1.02381028,
#                     0.21189874, -0.87493892,  0.15331484, -0.32353108,  0.3283232 ,
#                    -1.82980594,  1.17203518, -1.93470144,  0.15572785,  0.09924167,
#                    -1.37893591,  0.37120835, -4.699349  ,  3.79860843,  2.22600005,
#                     0.01550745,  0.45112647,  0.90138762,  0.40495501, -1.55558966,
#                    -0.85360301,  0.65788029,  2.40470885, -1.14382524, -1.80442397,
#                     0.9335869 , -0.76665758, -0.06382697, -1.61606282, -0.51881952,
#                     0.07891459, -1.68843198,  0.26458866,  2.80538937, -0.6124788 ,
#                    -0.60716577, -0.67772597, -2.02432678, -0.37911674, -1.15808416,
#                     0.25984712, -1.05119781, -1.5418919 , -0.95110117,  0.98066539,
#                    -0.05568079, -0.76754891,  3.69434084, -2.59025545,  1.54516602,
#                    -0.12969073, -0.39386919, -0.02708373,  1.09279266,  0.88159732,
#                    -0.27543622, -0.09834288,  0.95992359,  0.93229798,  1.94672096,
#                    -0.11731093,  0.63839029,  7.07915525,  2.26330512, -0.2087071 ,
#                    -1.33781301, -0.55777794, -0.41720646, -1.84572959,  0.74025447,
#                     0.53116324, -0.29208086,  0.40060191,  0.19311755, -0.05282572,
#                    -0.90716299,  0.83388537,  0.85333809,  1.56929155,  0.2558239 ,
#                     0.56676609,  1.66203223, -0.22627624,  3.51415632, -2.93814652,
#                    -1.29712107,  0.06140037,  3.66154468, -3.31189161, -2.50613137,
#                     0.38732009,  3.39944586,  1.24505971,  2.86175107,  3.31370095,
#                    -0.89260735,  1.51179894, -1.1256291 ,  3.32028965, -0.05346415,
#                    -2.68900598,  1.19286523, -2.09798945, -1.49708487, -1.82154691,
#                     1.87288799,  1.43093803,  1.88194732,  2.93363469, -3.90402163,
#                    -1.07349865])

# def getBestKnownValues():
#     '''
#     Return the values from the best known solution.
#     '''
#     from math import log
#     # com.how2cell.sabaody.biopredyn.b2-driver.17cc60e2-0b09-4c36-9ece-1c230920db5b
#     return array([-1.0117388052333642, -2.5509510090079672, 0.33181979683484825, -0.8870885169884736, -1.0485587677204034, 0.3307756758899458, -0.5857182113191848, 0.5449408376374082, 0.10486189129334611, 2.0059938845180736, -1.976450533542894, 0.9027760989138249, -2.6400748827005347, -0.14473039644470514, 0.28214198255573963, -1.388546927183749, -0.5202008888647391, -4.4473281594300555, 3.5327288763364946, 1.7973823110652627, -0.4063388238935545, -0.14666887912761617, 0.8061103877567916, -0.1605413657756039, -0.8020915004709046, -1.1380219848231847, -0.21740885526493323, 1.9804819886442573, -0.8897568294789632, -1.8040937374338208, 2.153985601303088, -0.7557205415338422, -0.7470894237287954, -0.7076019376512246, 0.8138506028150175, -1.4325291722990372, -1.4447687349103875, -0.14719140392623115, 2.955660525895991, 0.18974775306714867, -1.106784284750995, -0.5950864272938361, -2.130291743611378, -0.6406316115658833, 0.19523509160260805, 0.23406473457836852, -1.3539024984644699, -0.8028108272205017, -1.056650295363828, 0.8761292917506578, -0.543573842429498, -0.611525610590674, 3.6166695287239277, -2.146262533873622, 1.6319586845713498, -0.3510902797047877, 0.9127414003050132, -1.4587325124656845, -0.7497417319392518, -0.12988036499000216, 0.22539548107873136, 0.2610522350280924, -0.9517507644526769, -0.17734734809402095, 0.6827169336940943, -0.085312727281761, 1.1271898851209332, 6.628213964097033, 2.906794571276468, 0.5792355105908247, -1.086568251443565, -0.8566246050279663, -0.6474563657678604, -0.6485907923279128, -1.0101399515529987, -0.5370260608825351, -0.47601189365657753, -0.5920601415661711, 0.353193595262664, 0.945047545041008, 0.04670360533132935, 0.7349002733524208, 0.9118974813696108, 0.6607946798903515, -0.05436252119557336, 0.5126689379600732, 1.8440854511289015, -1.7611452121389044, 3.184698509366248, -2.4790515434077256, -2.111595951601851, 0.5346042866347808, 3.070612422864143, -3.046533631654286, -4.262199016477548, 0.7382288130951855, 3.9444326925171365, 1.499957925554191, 2.7500557813598414, 4.2761610330449535, -0.8672708924161694, 2.890914162775051, -1.5839231848768158, 3.0211756955736457, 1.5557125399307026, -2.2436187479165555, 1.6633809410948301, -1.1475157750342397, -0.7320907211221619, -0.9187733846386438, 1.6673688663728756, 2.359445341493568, 0.9354899533880948, 1.0047205405533308, -3.170647728582782, -0.5722392600922165])


def getBestKnownValues():
    '''
    Return the values from the best known solution.
    '''
    from math import log
    # com.how2cell.sabaody.biopredyn.b2-driver.17cc60e2-0b09-4c36-9ece-1c230920db5b
    return array([-0.684526724785494, -2.030636282603561, 0.34191173863475666, -0.7487593233815846, -1.1751680740716557, 0.358812900416041, -0.5979478620975514, 0.783600282369698, 0.24216875002121507, 2.0142856866855934, -1.9587986232394206, 1.0892230223815993, -2.5952873519840387, -0.06130879323933099, 0.29068650837061827, -1.369212032497419, -0.2999912009472931, -4.506856777087984, 3.571547528193739, 1.2261295570147017, -0.4073813428173835, -0.28216134239966323, 1.0007720729753027, -0.15803318698384122, -0.6798656796905767, -1.1353881719434789, -0.21996397534945525, 2.0723301823527316, -0.9168784287107162, -1.7755121687917566, 2.1468859177126265, -0.7596898507844358, -1.0656459309977475, -0.7358885748685544, 0.806147413149165, -1.4302110205844076, -0.8413220026744113, -0.516551399450242, 2.966853073479876, 0.267150727021904, -1.370927423007353, -0.582294359224312, -2.0703069736495534, -0.5688357459059649, 0.2045269296900588, -0.2438202297056718, -1.1963548258058838, -1.2234146418161036, 0.2906768979911903, 0.9764964921344522, -0.8871908379179562, 0.3821106464017837, 3.5359393588886623, -1.7191721086708665, 1.4917257675257614, -0.35482755540382466, 1.0572574014719982, -1.7665758922093373, -0.8232137734090231, -0.09711766851969175, 0.6719164588355524, -0.5448381045968179, -0.9442748302894161, -0.5617979992177828, 0.7050980178320214, 0.3092222970014541, 1.2959642970966039, 6.639415665574434, 3.142979917698847, 1.1692452627264212, -1.4178836006491429, -0.9832527059697324, -0.7556834097229048, -1.9034610359927735, -1.1401327414104532, -0.5061565336204249, -0.25105253298694413, -0.05444525584058978, 0.7321623566429514, 0.8615418490425066, 0.04845621327380342, 0.7163602325579491, 0.9212393819170135, 0.4727403601920567, -0.04211939857121045, 1.399894358164143, 1.396216339456149, -0.7227354770917069, 3.0254410022784968, -2.169538869899068, -2.8174311701311026, 0.5698424655238663, 3.0733059769008864, -2.4412470745230235, -3.8996175980548657, 0.8584309340560868, 3.902582012611838, 1.521694996328189, 2.8672062539917373, 3.6669651327460024, -0.8641325860194005, 2.8152800855191282, -0.2270135099089278, 3.027212549300065, 0.11913300793903867, -2.6851976499496932, 1.617967925531526, -0.699146828120635, -0.7113425623307926, -1.4962137603451908, 1.8930298987070386, 2.821861500011227, 1.7058239156240627, 0.9415337261178265, -2.032651339238379, -0.6678750649131379])
